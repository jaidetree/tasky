// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Core__Result from "@rescript/core/src/Core__Result.res.mjs";

function session_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "started_at",
                    Spice.floatToJson(v.started_at)
                  ],
                  [
                    "ended_at",
                    (function (extra) {
                          return Spice.optionToJson(Spice.floatToJson, extra);
                        })(v.ended_at)
                  ],
                  [
                    "interrupted_by_task_id",
                    (function (extra) {
                          return Spice.optionToJson(Spice.stringToJson, extra);
                        })(v.interrupted_by_task_id)
                  ],
                  [
                    "notes",
                    Spice.stringToJson(v.notes)
                  ]
                ]));
}

function session_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  var match = Belt_Option.map(Js_dict.get(v, "id"), Spice.stringFromJson);
  if (match === undefined) {
    return Spice.error(undefined, "id missing", v);
  }
  if (match.TAG === "Ok") {
    var id = match._0;
    var match$1 = Belt_Option.map(Js_dict.get(v, "started_at"), Spice.floatFromJson);
    if (match$1 === undefined) {
      return Spice.error(undefined, "started_at missing", v);
    }
    if (match$1.TAG === "Ok") {
      var started_at = match$1._0;
      var match$2 = Belt_Option.map(Js_dict.get(v, "ended_at"), (function (extra) {
              return Spice.optionFromJson(Spice.floatFromJson, extra);
            }));
      if (match$2 !== undefined) {
        if (match$2.TAG === "Ok") {
          var ended_at = match$2._0;
          var match$3 = Belt_Option.map(Js_dict.get(v, "interrupted_by_task_id"), (function (extra) {
                  return Spice.optionFromJson(Spice.stringFromJson, extra);
                }));
          if (match$3 !== undefined) {
            if (match$3.TAG === "Ok") {
              var match$4 = Belt_Option.map(Js_dict.get(v, "notes"), Spice.stringFromJson);
              if (match$4 === undefined) {
                return Spice.error(undefined, "notes missing", v);
              }
              if (match$4.TAG === "Ok") {
                return {
                        TAG: "Ok",
                        _0: {
                          id: id,
                          started_at: started_at,
                          ended_at: ended_at,
                          interrupted_by_task_id: match$3._0,
                          notes: match$4._0
                        }
                      };
              }
              var e = match$4._0;
              return {
                      TAG: "Error",
                      _0: {
                        path: ".notes" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = match$3._0;
            return {
                    TAG: "Error",
                    _0: {
                      path: ".interrupted_by_task_id" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var match$5 = Belt_Option.map(Js_dict.get(v, "notes"), Spice.stringFromJson);
          if (match$5 === undefined) {
            return Spice.error(undefined, "notes missing", v);
          }
          if (match$5.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      id: id,
                      started_at: started_at,
                      ended_at: ended_at,
                      interrupted_by_task_id: undefined,
                      notes: match$5._0
                    }
                  };
          }
          var e$2 = match$5._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: ".notes" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = match$2._0;
        return {
                TAG: "Error",
                _0: {
                  path: ".ended_at" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var match$6 = Belt_Option.map(Js_dict.get(v, "interrupted_by_task_id"), (function (extra) {
              return Spice.optionFromJson(Spice.stringFromJson, extra);
            }));
      if (match$6 !== undefined) {
        if (match$6.TAG === "Ok") {
          var match$7 = Belt_Option.map(Js_dict.get(v, "notes"), Spice.stringFromJson);
          if (match$7 === undefined) {
            return Spice.error(undefined, "notes missing", v);
          }
          if (match$7.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      id: id,
                      started_at: started_at,
                      ended_at: undefined,
                      interrupted_by_task_id: match$6._0,
                      notes: match$7._0
                    }
                  };
          }
          var e$4 = match$7._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: ".notes" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = match$6._0;
        return {
                TAG: "Error",
                _0: {
                  path: ".interrupted_by_task_id" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var match$8 = Belt_Option.map(Js_dict.get(v, "notes"), Spice.stringFromJson);
      if (match$8 === undefined) {
        return Spice.error(undefined, "notes missing", v);
      }
      if (match$8.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: {
                  id: id,
                  started_at: started_at,
                  ended_at: undefined,
                  interrupted_by_task_id: undefined,
                  notes: match$8._0
                }
              };
      }
      var e$6 = match$8._0;
      return {
              TAG: "Error",
              _0: {
                path: ".notes" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = match$1._0;
    return {
            TAG: "Error",
            _0: {
              path: ".started_at" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = match._0;
  return {
          TAG: "Error",
          _0: {
            path: ".id" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function task_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "name",
                    Spice.stringToJson(v.name)
                  ],
                  [
                    "notes",
                    Spice.stringToJson(v.notes)
                  ],
                  [
                    "parent_task_id",
                    (function (extra) {
                          return Spice.optionToJson(Spice.stringToJson, extra);
                        })(v.parent_task_id)
                  ],
                  [
                    "estimated_time",
                    Spice.intToJson(v.estimated_time)
                  ],
                  [
                    "time_sessions",
                    (function (extra) {
                          return Spice.arrayToJson(session_encode, extra);
                        })(v.time_sessions)
                  ],
                  [
                    "tasks",
                    (function (extra) {
                          return Spice.arrayToJson(task_encode, extra);
                        })(v.tasks)
                  ]
                ]));
}

function task_decode(v) {
  if (!Array.isArray(v) && (v === null || typeof v !== "object") && typeof v !== "number" && typeof v !== "string" && typeof v !== "boolean") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (!(typeof v === "object" && !Array.isArray(v))) {
    return Spice.error(undefined, "Not an object", v);
  }
  var match = Belt_Option.map(Js_dict.get(v, "id"), Spice.stringFromJson);
  if (match === undefined) {
    return Spice.error(undefined, "id missing", v);
  }
  if (match.TAG === "Ok") {
    var id = match._0;
    var match$1 = Belt_Option.map(Js_dict.get(v, "name"), Spice.stringFromJson);
    if (match$1 === undefined) {
      return Spice.error(undefined, "name missing", v);
    }
    if (match$1.TAG === "Ok") {
      var name = match$1._0;
      var match$2 = Belt_Option.map(Js_dict.get(v, "notes"), Spice.stringFromJson);
      if (match$2 === undefined) {
        return Spice.error(undefined, "notes missing", v);
      }
      if (match$2.TAG === "Ok") {
        var notes = match$2._0;
        var match$3 = Belt_Option.map(Js_dict.get(v, "parent_task_id"), (function (extra) {
                return Spice.optionFromJson(Spice.stringFromJson, extra);
              }));
        if (match$3 !== undefined) {
          if (match$3.TAG === "Ok") {
            var match$4 = Belt_Option.map(Js_dict.get(v, "estimated_time"), Spice.intFromJson);
            if (match$4 === undefined) {
              return Spice.error(undefined, "estimated_time missing", v);
            }
            if (match$4.TAG === "Ok") {
              var match$5 = Belt_Option.map(Js_dict.get(v, "time_sessions"), (function (extra) {
                      return Spice.arrayFromJson(session_decode, extra);
                    }));
              if (match$5 === undefined) {
                return Spice.error(undefined, "time_sessions missing", v);
              }
              if (match$5.TAG === "Ok") {
                var match$6 = Belt_Option.map(Js_dict.get(v, "tasks"), (function (extra) {
                        return Spice.arrayFromJson(task_decode, extra);
                      }));
                if (match$6 === undefined) {
                  return Spice.error(undefined, "tasks missing", v);
                }
                if (match$6.TAG === "Ok") {
                  return {
                          TAG: "Ok",
                          _0: {
                            id: id,
                            name: name,
                            notes: notes,
                            parent_task_id: match$3._0,
                            estimated_time: match$4._0,
                            time_sessions: match$5._0,
                            tasks: match$6._0
                          }
                        };
                }
                var e = match$6._0;
                return {
                        TAG: "Error",
                        _0: {
                          path: ".tasks" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = match$5._0;
              return {
                      TAG: "Error",
                      _0: {
                        path: ".time_sessions" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = match$4._0;
            return {
                    TAG: "Error",
                    _0: {
                      path: ".estimated_time" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = match$3._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: ".parent_task_id" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var match$7 = Belt_Option.map(Js_dict.get(v, "estimated_time"), Spice.intFromJson);
        if (match$7 === undefined) {
          return Spice.error(undefined, "estimated_time missing", v);
        }
        if (match$7.TAG === "Ok") {
          var match$8 = Belt_Option.map(Js_dict.get(v, "time_sessions"), (function (extra) {
                  return Spice.arrayFromJson(session_decode, extra);
                }));
          if (match$8 === undefined) {
            return Spice.error(undefined, "time_sessions missing", v);
          }
          if (match$8.TAG === "Ok") {
            var match$9 = Belt_Option.map(Js_dict.get(v, "tasks"), (function (extra) {
                    return Spice.arrayFromJson(task_decode, extra);
                  }));
            if (match$9 === undefined) {
              return Spice.error(undefined, "tasks missing", v);
            }
            if (match$9.TAG === "Ok") {
              return {
                      TAG: "Ok",
                      _0: {
                        id: id,
                        name: name,
                        notes: notes,
                        parent_task_id: undefined,
                        estimated_time: match$7._0,
                        time_sessions: match$8._0,
                        tasks: match$9._0
                      }
                    };
            }
            var e$4 = match$9._0;
            return {
                    TAG: "Error",
                    _0: {
                      path: ".tasks" + e$4.path,
                      message: e$4.message,
                      value: e$4.value
                    }
                  };
          }
          var e$5 = match$8._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: ".time_sessions" + e$5.path,
                    message: e$5.message,
                    value: e$5.value
                  }
                };
        }
        var e$6 = match$7._0;
        return {
                TAG: "Error",
                _0: {
                  path: ".estimated_time" + e$6.path,
                  message: e$6.message,
                  value: e$6.value
                }
              };
      }
      var e$7 = match$2._0;
      return {
              TAG: "Error",
              _0: {
                path: ".notes" + e$7.path,
                message: e$7.message,
                value: e$7.value
              }
            };
    }
    var e$8 = match$1._0;
    return {
            TAG: "Error",
            _0: {
              path: ".name" + e$8.path,
              message: e$8.message,
              value: e$8.value
            }
          };
  }
  var e$9 = match._0;
  return {
          TAG: "Error",
          _0: {
            path: ".id" + e$9.path,
            message: e$9.message,
            value: e$9.value
          }
        };
}

async function createTask(task) {
  var response = await fetch("/api/tasks.json", {
        body: task_encode(task),
        method: "POST",
        headers: {
          "Content-Type": "json"
        }
      });
  var json = await response.json();
  var decoded = task_decode(json);
  return Core__Result.getExn(decoded);
}

async function fetchTask(taskId) {
  var response = await fetch("/api/tasks/" + taskId + ".json", {
        method: "GET",
        headers: {
          "Content-Type": "json"
        }
      });
  var json = await response.json();
  var decoded = task_decode(json);
  return Core__Result.getExn(decoded);
}

export {
  session_encode ,
  session_decode ,
  task_encode ,
  task_decode ,
  createTask ,
  fetchTask ,
}
/* No side effect */
