// Generated by ReScript, PLEASE EDIT WITH CARE

import * as State from "./State.res.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "preact/jsx-runtime";

function title(title$1) {
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: {
          TAG: "Update",
          _0: {
            TAG: "Title",
            _0: title$1
          }
        }
      });
}

function estimatedTimeHours(hours) {
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: {
          TAG: "Update",
          _0: {
            TAG: "EstimateHours",
            _0: hours
          }
        }
      });
}

function estimatedTimeMinutes(minutes) {
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: {
          TAG: "Update",
          _0: {
            TAG: "EstimateMinutes",
            _0: minutes
          }
        }
      });
}

function dueDate(dueDate$1) {
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: {
          TAG: "Update",
          _0: {
            TAG: "DueDate",
            _0: dueDate$1
          }
        }
      });
}

function parentTask(id) {
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: {
          TAG: "Update",
          _0: {
            TAG: "ParentTask",
            _0: id
          }
        }
      });
}

function notes(notes$1) {
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: {
          TAG: "Update",
          _0: {
            TAG: "Notes",
            _0: notes$1
          }
        }
      });
}

var Update = {
  title: title,
  estimatedTimeHours: estimatedTimeHours,
  estimatedTimeMinutes: estimatedTimeMinutes,
  dueDate: dueDate,
  parentTask: parentTask,
  notes: notes
};

function onSubmit(e) {
  e.preventDefault();
  State.AppFSM.dispatch({
        TAG: "NewTask",
        _0: "Save"
      });
}

function onInput(e) {
  var target = e.target;
  var name = target.name;
  var value = target.value;
  if (name !== undefined) {
    switch (name) {
      case "due_date" :
          if (!(value == null)) {
            return dueDate(value === "" ? undefined : value);
          }
          break;
      case "estimated_time_hours" :
          if (!(value == null)) {
            return estimatedTimeHours(Core__Option.getOr(Core__Int.fromString(value, undefined), 0));
          }
          break;
      case "estimated_time_minutes" :
          if (!(value == null)) {
            return estimatedTimeMinutes(Core__Option.getOr(Core__Int.fromString(value, undefined), 0));
          }
          break;
      case "notes" :
          if (!(value == null)) {
            return notes(value);
          }
          break;
      case "parent_task_id" :
          if (!(value == null)) {
            return parentTask(value === "" ? undefined : value);
          }
          break;
      case "title" :
          if (!(value == null)) {
            return title(value);
          }
          break;
      default:
        
    }
    if (value == null) {
      console.warn("Could not get form value from field " + name);
      return ;
    } else {
      return ;
    }
  }
  console.warn("Could not get name of field");
}

function NewTaskForm(props) {
  var state = props.state;
  var estimatedTime;
  estimatedTime = typeof state !== "object" || state.TAG !== "Active" ? ({
        hours: 0,
        minutes: 20
      }) : state._0.estimated_time_map;
  var tasks = State.TasksFSM.getTasks();
  return JsxRuntime.jsxs("form", {
              children: [
                JsxRuntime.jsx("header", {
                      children: JsxRuntime.jsx("h2", {
                            children: "New Task",
                            className: "text-xl"
                          })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("section", {
                              children: [
                                JsxRuntime.jsx("label", {
                                      children: "Title",
                                      className: "block py-2",
                                      htmlFor: "id_title"
                                    }),
                                JsxRuntime.jsx("input", {
                                      className: "bg-stone-700/20 p-2 rounded-sm w-full",
                                      name: "title",
                                      type: "text"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("section", {
                              children: [
                                JsxRuntime.jsx("label", {
                                      children: "Estimate",
                                      className: "block py-2",
                                      htmlFor: "id_estimated_time"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("input", {
                                                      className: "block bg-stone-700/20 p-2 rounded-sm flex-shrink w-full",
                                                      max: "23",
                                                      min: "0",
                                                      name: "estimated_time_hours",
                                                      step: 1.0,
                                                      type: "range",
                                                      value: estimatedTime.hours.toString()
                                                    }),
                                                JsxRuntime.jsxs("span", {
                                                      children: [
                                                        JsxRuntime.jsx("output", {}),
                                                        estimatedTime.hours.toString() + " hrs"
                                                      ]
                                                    })
                                              ],
                                              className: "flex flex-col gap-2 items-center"
                                            }),
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("input", {
                                                      className: "block bg-stone-700/20 p-2 rounded-sm flex-shrink w-full",
                                                      max: "59",
                                                      min: "0",
                                                      name: "estimated_time_minutes",
                                                      type: "range",
                                                      value: estimatedTime.minutes.toString()
                                                    }),
                                                JsxRuntime.jsx("span", {
                                                      children: estimatedTime.minutes.toString() + " min"
                                                    })
                                              ],
                                              className: "flex flex-col gap-2 items-center"
                                            })
                                      ],
                                      className: "flex flex-row gap-2 items-center"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("section", {
                              children: [
                                JsxRuntime.jsx("label", {
                                      children: "Due Date",
                                      className: "block py-2",
                                      htmlFor: "id_due_date"
                                    }),
                                JsxRuntime.jsx("input", {
                                      className: "bg-stone-700/20 p-2 rounded-sm w-full",
                                      name: "due_date",
                                      type: "date"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("section", {
                              children: [
                                JsxRuntime.jsx("label", {
                                      children: "Parent Task",
                                      className: "block py-2",
                                      htmlFor: "id_parent_task_id"
                                    }),
                                JsxRuntime.jsxs("select", {
                                      children: [
                                        JsxRuntime.jsx("option", {
                                              children: "-- No Parent Task --",
                                              value: ""
                                            }),
                                        tasks.map(function (task) {
                                              return JsxRuntime.jsx("option", {
                                                          children: task.title,
                                                          value: task.id
                                                        }, task.id);
                                            })
                                      ],
                                      className: "bg-stone-700/20 p-2 rounded-sm w-full",
                                      id: "id_parent_task_id",
                                      name: "parent_task_id"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("section", {
                              children: [
                                JsxRuntime.jsx("label", {
                                      children: "Notes",
                                      className: "block py-2",
                                      htmlFor: "id_notes"
                                    }),
                                JsxRuntime.jsx("textarea", {
                                      className: "bg-stone-700/20 p-2 rounded-sm w-full h-40",
                                      id: "id_notes",
                                      name: "notes"
                                    })
                              ]
                            }),
                        JsxRuntime.jsx("section", {
                              children: JsxRuntime.jsx("button", {
                                    children: "Create",
                                    className: "btn py-2 px-4 text-white bg-blue-500",
                                    type: "submit"
                                  }),
                              className: "flex flex-row justify-end items-center gap-2 py-4"
                            })
                      ],
                      className: "flex flex-col gap-2"
                    })
              ],
              className: "gap-2",
              onInput: onInput,
              onSubmit: onSubmit
            });
}

var make = NewTaskForm;

export {
  Update ,
  onSubmit ,
  onInput ,
  make ,
}
/* State Not a pure module */
